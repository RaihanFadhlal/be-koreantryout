{
	"info": {
		"_postman_id": "a073b6c2-c1e3-423b-8dee-6255ee049b68",
		"name": "Tekor Auth Service",
		"description": "Koleksi untuk menguji endpoint otentikasi pada Tekor API. Termasuk registrasi, login, dan verifikasi email.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42785131"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Uji apakah status code adalah 201 Created",
									"pm.test(\"Status code is 201 CREATED\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Uji apakah respons adalah JSON yang valid",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Uji struktur dasar dari common response",
									"pm.test(\"Response body has required fields (status, message, data)\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"// Uji isi dari field 'status' dan 'message'",
									"pm.test(\"Status is 'success' and message is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql(\"success\");",
									"    pm.expect(responseData.message).to.eql(\"Registration successful. Please check your email for verification.\");",
									"});",
									"",
									"// Simpan userId dari respons ke environment variable untuk digunakan di request selanjutnya",
									"pm.test(\"User ID is captured\", function() {",
									"    const responseData = pm.response.json();",
									"    if (responseData.data && responseData.data.id) {",
									"        pm.environment.set(\"userId\", responseData.data.id);",
									"        console.log(\"User ID saved: \" + responseData.data.id);",
									"    } else {",
									"        console.error(\"Could not find user ID in the response.\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullName\": \"Aflah Agus Rizkika\",\n    \"username\": \"raaflahar\",\n    \"email\": \"raaflahar@gmail.com\",\n    \"password\": \"password123\",\n    \"phoneNumber\": \"081234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Mendaftarkan pengguna baru dan menyimpan `userId` ke environment."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Uji apakah status code adalah 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Uji struktur dan isi respons",
									"pm.test(\"Response has correct structure and message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql(\"success\");",
									"    pm.expect(responseData.message).to.eql(\"Login successful.\");",
									"    pm.expect(responseData.data).to.have.property('token');",
									"    pm.expect(responseData.data).to.have.property('role');",
									"});",
									"",
									"// Simpan token JWT ke environment variable",
									"pm.test(\"JWT token is captured\", function() {",
									"    const responseData = pm.response.json();",
									"    if (responseData.data && responseData.data.token) {",
									"        pm.environment.set(\"jwt_token\", responseData.data.token);",
									"        console.log(\"JWT Token saved.\");",
									"    } else {",
									"        console.error(\"Could not find JWT token in the response.\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"raaflahar\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login dengan kredensial pengguna dan menyimpan `jwt_token`."
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Uji apakah status code adalah 200 OK",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Uji apakah pesan sukses diterima",
									"pm.test(\"Verification message is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql(\"success\");",
									"    // Pesan ini mungkin bervariasi tergantung implementasi di service Anda",
									"    pm.expect(responseData.message).to.include(\"berhasil diverifikasi\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/verify?userId={{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"verify"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						},
						"description": "Memverifikasi email pengguna menggunakan `userId` yang didapat dari request registrasi."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}